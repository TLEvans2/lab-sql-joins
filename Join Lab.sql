-- Write SQL queries to perform the following tasks using the Sakila database:
use sakila;

-- List the number of films per category.
select c.name as category, count(film_id) as films
from film f
join film_category fc
using(film_id)
join category c
using(category_id)
Group by category_id
order by category; 

select c.name as category, count(film_id) as films
from category c  
join film_category f
using(category_id)
Group by category;

-- Retrieve the store ID, city, and country for each store.

select store_id, c.city as city, t.country
from store s 
join address a 
using(address_id)
join city c
using(city_id)
join country t
using(country_id) ;


-- Calculate the total revenue generated by each store in dollars.

select * from store ;
select * from staff;
select * from payment ; 

select s.store_id as store, s.staff_id, sum(p.amount) as 'revenue ($)'
from payment p 
join staff s 
on p.staff_id = s.staff_id
group by staff_id; 

SELECT
	s.store_id AS store_ID,
	SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st ON s.manager_staff_id = st.staff_id
JOIN payment p USING(staff_id)
GROUP BY s.store_id;


-- Determine the average running time of films for each category.
select c.name as category, Round(avg(f.length)) as 'run time' 
from film f
join film_category fc
using(film_id)
join category c
using(category_id)
Group by category; 

select * from film ;


-- Bonus:

-- Identify the film categories with the longest average running time.

select c.name as category, Round(avg(f.length)) as 'run time' 
from film f
join film_category fc
using(film_id)
join category c
using(category_id)
Group by category
Order by Round(avg(f.length)) desc
Limit 5;  -- My definition of top is the top 5 but you can choose whatever you want 

-- Display the top 10 most frequently rented movies in descending order.

select f.title as film, count(r.rental_id) as rentals
from rental r 
join inventory i 
on r.inventory_id = i.inventory_id
join film f 
where i.film_id = f.film_id
group by film
order by rentals desc 
limit 10 ;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
select * from film ; -- academy dino has a film_id of 1 

select * from film 
where title like '%academy dinosaur%'; -- could also look for it specifically

select * from inventory
where film_id = 1
and store_id =1;
-- Yes, they have 4 copies 

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
select distinct title, count(inventory_id) as copies
from film f
left join inventory i
using(film_id) 
group by title ;

-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

select distinct title, count(inventory_id) as copies,
case 
	when count(inventory_id) = 0 then 'Not Available' 
	else 'Available' 
end as availability
from film f
left join inventory i
using(film_id) 
group by title ;